// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/petshop/domain/pet.go

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	context "context"
	domain "github.com/funa1g/microservice-example/pkg/petshop/domain"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPetUsecase is a mock of PetUsecase interface
type MockPetUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockPetUsecaseMockRecorder
}

// MockPetUsecaseMockRecorder is the mock recorder for MockPetUsecase
type MockPetUsecaseMockRecorder struct {
	mock *MockPetUsecase
}

// NewMockPetUsecase creates a new mock instance
func NewMockPetUsecase(ctrl *gomock.Controller) *MockPetUsecase {
	mock := &MockPetUsecase{ctrl: ctrl}
	mock.recorder = &MockPetUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPetUsecase) EXPECT() *MockPetUsecaseMockRecorder {
	return m.recorder
}

// GetList mocks base method
func (m *MockPetUsecase) GetList(ctx context.Context, limit int) ([]domain.Pet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetList", ctx, limit)
	ret0, _ := ret[0].([]domain.Pet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetList indicates an expected call of GetList
func (mr *MockPetUsecaseMockRecorder) GetList(ctx, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetList", reflect.TypeOf((*MockPetUsecase)(nil).GetList), ctx, limit)
}

// Store mocks base method
func (m *MockPetUsecase) Store(ctx context.Context, p *domain.Pet) (domain.Pet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", ctx, p)
	ret0, _ := ret[0].(domain.Pet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Store indicates an expected call of Store
func (mr *MockPetUsecaseMockRecorder) Store(ctx, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockPetUsecase)(nil).Store), ctx, p)
}

// GetById mocks base method
func (m *MockPetUsecase) GetById(ctx context.Context, id int) (domain.Pet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id)
	ret0, _ := ret[0].(domain.Pet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById
func (mr *MockPetUsecaseMockRecorder) GetById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockPetUsecase)(nil).GetById), ctx, id)
}

// MockPetRepository is a mock of PetRepository interface
type MockPetRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPetRepositoryMockRecorder
}

// MockPetRepositoryMockRecorder is the mock recorder for MockPetRepository
type MockPetRepositoryMockRecorder struct {
	mock *MockPetRepository
}

// NewMockPetRepository creates a new mock instance
func NewMockPetRepository(ctrl *gomock.Controller) *MockPetRepository {
	mock := &MockPetRepository{ctrl: ctrl}
	mock.recorder = &MockPetRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPetRepository) EXPECT() *MockPetRepositoryMockRecorder {
	return m.recorder
}

// GetList mocks base method
func (m *MockPetRepository) GetList(ctx context.Context, limit int) ([]domain.Pet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetList", ctx, limit)
	ret0, _ := ret[0].([]domain.Pet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetList indicates an expected call of GetList
func (mr *MockPetRepositoryMockRecorder) GetList(ctx, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetList", reflect.TypeOf((*MockPetRepository)(nil).GetList), ctx, limit)
}

// Store mocks base method
func (m *MockPetRepository) Store(ctx context.Context, p *domain.PetOrigin) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", ctx, p)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Store indicates an expected call of Store
func (mr *MockPetRepositoryMockRecorder) Store(ctx, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockPetRepository)(nil).Store), ctx, p)
}

// GetById mocks base method
func (m *MockPetRepository) GetById(ctx context.Context, id int) (domain.Pet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id)
	ret0, _ := ret[0].(domain.Pet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById
func (mr *MockPetRepositoryMockRecorder) GetById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockPetRepository)(nil).GetById), ctx, id)
}
